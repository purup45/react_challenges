import "./styles.css";
import { useState } from "react";


// things you learns
      //object mapping/object length checking
      //list "includes" option and push method for list
      //spread operator
      //accessing fcns inside the buttons option like style
      //deleting an item from list(list.filter=>using temp list) or using splice method
     //deleting an item from obj(delete obj[])

export default function App() {
  const initial = {
    Bhutan: "Thimphu",
    India: "Delhi",
    Canada: "Toronto",
    Nepal: "Kathmandu"
  };

  // for changes to original obj(dict)
  const [options, setOptions] = useState(initial);
  //for temp obj updates
  const newoption=options

// for selected button info updates
  const [selection, setSelection] = useState([]);
  
  

  const selected = (e) => {
    //console.log(e.target.style.color);
    e.target.style.color = e.target.style.color === "blue" ? "red" : "blue";

         // if selection list already includes the button clicked
    if (selection.includes(e.target.value)) {
      console.log("Can't select  the same option twice");

            // Filter out the selected value from the list by making a temp list
      const newList = selection.filter((item) => item !== e.target.value);
      setSelection(newList);

      
  }else if (selection.length === 2) {
      e.target.style.color = "blue";
      console.log(selection, "cant select more than two options");
    
    
    } else {
      const updatedList = [...selection, e.target.value];
      setSelection(updatedList);
      //console.log(updatedList, "updatedList",,selection,'selection');
      setLen(selection);
      if (
        (options[updatedList[0]] === updatedList[1] ||
        options[updatedList[1]] === updatedList[0]) && updatedList.length===2) 
       {
        delete (newoption[updatedList[1]])
        delete (newoption[updatedList[0]])
        setSelection([])
        setOptions(newoption)
       
        
       //obj length checking
        Object.keys(newoption).length===0?alert("you completed the task"):alert("you found a pair")
      }
      }};

  return (
    <div className="App">
    //dict mapping for keys and values to buttons
      {Object.entries(options).map(([key, value]) => (
        <button
          style={{
            color: "blue"
          }}
          key={key}
          value={key}
          onClick={selected}
        >
          {key}
        </button>
      ))}
      {Object.values(options).map((value) => (
        <button
          style={{
            color: "blue"
          }}
          key={value}
          value={value}
          onClick={selected}
        >
          {value}
        </button>
      ))}
    </div>
  );
}
// refactored code.... includes
//list includes
//list splicing/indexing to remove the item
//spread operator of object={...obj} and of list=[...list]
//color: selectedItems.includes(value) ? "red" : "blue"
import "./styles.css";
import React, { useState } from "react";

export default function App() {
  // Initial dictionary of options
  const initialOptions = {
    Bhutan: "Thimphu",
    India: "Delhi",
    Canada: "Toronto",
    Nepal: "Kathmandu"
  };

  // UseState for options and selected items
  const [options, setOptions] = useState(initialOptions);
  const [selectedItems, setSelectedItems] = useState([]);

  // Function to handle item selection
  const handleItemSelect = (item) => {
    // Create a copy of the selectedItems array
    const updatedSelectedItems = [...selectedItems];

    // If the item is already selected, deselect it
    if (updatedSelectedItems.includes(item)) {
      updatedSelectedItems.splice(updatedSelectedItems.indexOf(item), 1);
    } else if (updatedSelectedItems.length < 2) {
      // If less than two items are selected, add the item
      updatedSelectedItems.push(item);
    }

    // Update the selected items array
    setSelectedItems(updatedSelectedItems);

    // Check for a pair and update options
    if (updatedSelectedItems.length === 2) {
      const [firstItem, secondItem] = updatedSelectedItems;
      if (options[firstItem] === secondItem || options[secondItem] === firstItem) {
        // If it's a pair, remove the items from options
        const updatedOptions = { ...options };
        delete updatedOptions[firstItem];
        delete updatedOptions[secondItem];
        setOptions(updatedOptions);
        setSelectedItems([]);

        // Check if all pairs are found
        Object.keys(updatedOptions).length === 0?
          alert("Congratulations! You found all the pairs.")
        :alert("You found a pair!")
        
      }
    }
  };

  return (
    <div className="App">
      {/* Map through options and create buttons for keys */}
      {Object.keys(options).map((key) => (
        <button
          key={key}
          value={key}
          style={{
            color: selectedItems.includes(key) ? "red" : "blue"
          }}
          onClick={() => handleItemSelect(key)}
        >
          {key}
        </button>
      ))}

      {/* Map through options and create buttons for values */}
      {Object.values(options).map((value) => (
        <button
          key={value}
          value={value}
          style={{
            color: selectedItems.includes(value) ? "red" : "blue"
          }}
          onClick={() => handleItemSelect(value)}
        >
          {value}
        </button>
      ))}
    </div>
  );
}
